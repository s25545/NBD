1.
MATCH (Darjeeling:town { name: 'Darjeeling'}), (Sandakphu:peak { name: 'Sandakphu'})
MATCH p = ShortestPath((Darjeeling)-[*]->(Sandakphu))
RETURN p

2.
MATCH p = ShortestPath((Darjeeling:town{name:'Darjeeling'})-[*]->(Sandakphu:peak{name:'Sandakphu'}))
WHERE ALL(r in relationships(p) WHERE r.winter = "true")
RETURN p

3.
MATCH p = (Darjeeling:town {name: 'Darjeeling'})-[*]->(Sandakphu:peak {name:'Sandakphu'})
RETURN p, REDUCE(distance = 0, p IN relationships(p) | distance + p.distance) AS distance
ORDER BY distance

4.
MATCH p = (Darjeeling:town {name: 'Darjeeling'})-[*]->(destination)
WHERE ALL(p IN relationships(p) WHERE type(p) = 'twowheeler' AND p.summer = 'true')
RETURN p

5.
MATCH (flight:Flight)-[origin:ORIGIN]->(airport:Airport)
RETURN airport, count(origin) AS NumberOfFlights
ORDER BY NumberOfFlights

6.
MATCH p = (lax:Airport {name:"LAX" })<-[:ORIGIN]-(:Flight)-[:ORIGIN|DESTINATION*..10]->(destination:Airport)
WHERE REDUCE(start = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | start + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) < 3000
RETURN p

7.
MATCH p = (lax:Airport {name:"LAX" })<-[:ORIGIN]-(:Flight)-[:ORIGIN|DESTINATION*..10]->(day:Airport {name: "DAY"})
WITH p, REDUCE(start = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | start + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) as ticketPrice
RETURN p, ticketPrice
ORDER BY ticketPrice ASC

8.
MATCH p = (lax:Airport {name:"LAX" })<-[:ORIGIN]-(:Flight)-[:ORIGIN|DESTINATION*..10]->(day:Airport {name: "DAY"})
WITH p, REDUCE(start = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | start + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) as ticketPrice
RETURN p, ticketPrice
ORDER BY ticketPrice ASC LIMIT 1

9.
MATCH (airport1:Airport)<-[:ORIGIN]-(flight:Flight) 
MATCH (airport2:Airport)<-[:DESTINATION]-(flight:Flight) 
UNWIND [airport1, airport2] as connection
RETURN flight.airline AS airline, count(distinct connection) AS numberOfConnections
ORDER BY numberOfConnections DESC

10.
MATCH p = (airport1:Airport)<-[relation1:ORIGIN]-(flight1:Flight)-[relation2:DESTINATION]->(airport2:Airport)<-[relation3:ORIGIN]-(flight2:Flight)-[relation4:DESTINATION]->(airport3:Airport)
WHERE NOT(airport1 = airport2) AND NOT(airport1 = airport3) AND NOT(airport2 = airport3)
WITH p, REDUCE(start = 0, n IN [x IN NODES(p) WHERE 'Flight' IN LABELS(x)] | start + [(n)<-[:ASSIGN]-(ticket) | ticket.price][0]) AS ticketPrice
RETURN p, ticketPrice
ORDER BY ticketPrice ASC LIMIT 1
